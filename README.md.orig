Wetten tools
============

This repo contains a bunch of Ruby scripts that are used to

<<<<<<< HEAD
1. [Populate a CouchDB database with Dutch laws, along with their metadata, and maintain it through time]()
2. [Populate a git repository that contains historical versions of Dutch laws in Markdown format]()
=======
This project may also be of some interest for its model package. Classes are defined to automatically marshall a BwbIdList into a Java object. See [`General Tools`](https://github.com/statengeneraal/tools-general/tree/master/webservice) for the XML schema that I have generated for this.

Motivation
----------
While the Dutch government publishes Dutch laws through their own BWB service, some problems exist with it:

* The service is very slow
* Only one version of a law (the current) is available; there are no historical consolidations available
* Bulk requests are not possible

While the [MetaLex Document Server](http://doc.metalex.eu/) solves the first two of these problems, it also introduces (more subtle) problems and bugs. If we want to re-do the MetaLex Document Server, it is good to have a copy of the source document around. 

Usage
-----
The database is hosted at [https://wetten.cloudant.com/](https://wetten.cloudant.com/) as a CouchDB database. 

Of course, one may access any document through the `_all_docs` view with some query parameters set, .e.g,:
[`https://wetten.cloudant.com/bwb/_all_docs?limit=10&startkey="BWBR0002178"&endkey="BWBR0002179"`](https://wetten.cloudant.com/bwb/_all_docs?limit=10&startkey="BWBR0002178"&endkey="BWBR0002179")

This will show full documents, but we may be interested in just the metadata. I have defined some additional views:

| View name          | Description                                                                        | Example                                                                                                                                                                                 |
| ---                | ---                                                                                | ---                                                                                                                                                                                     |
| `all`              | Indexes all expressions and shows the available metadata                           | [http://wetten.cloudant.com/bwb/_design/RegelingInfo/_view/all?limit=10](http://wetten.cloudant.com/bwb/_design/RegelingInfo/_view/all?limit=10)                                        |
| `all_from_metalex` | Like `all`, but shows only index files that have been converted from MetaLex       | [http://wetten.cloudant.com/bwb/_design/RegelingInfo/_view/all_from_metalex?limit=10](http://wetten.cloudant.com/bwb/_design/RegelingInfo/_view/all_from_metalex?limit=10)              |
| `all_non_metalex`  | Like `all`, but shows only index files that have *not* been converted from MetaLex | [http://wetten.cloudant.com/bwb/_design/RegelingInfo/_view/all_non_metalex?limit=10](http://wetten.cloudant.com/bwb/_design/RegelingInfo/_view/all_non_metalex?limit=10)                |

Additionally, a JSON respresentation of `BWBIdList.xml` is stored at [http://wetten.cloudant.com/bwb/bwbIdList](http://wetten.cloudant.com/bwb/bwbIdList).

These files are updated every day at 9:00 CET. 

Some technical notes
--------------------
The project sets up a task that wakes up at 9 'o' clock every morning and check if there are any laws added. The `BwbIdList.xml` of today that are not yet in our CouchDB database. If so, the service downloads them, performs some logic, and stores them in a CouchDB database hosted by Cloudant. Documents are stored as CouchDB JSON-files with a field called "xml", which contains the document content, unsurprisingly in XML format. IDs are of the form `{BWBID}/{EXPRESSION DATE}`, which encodes to `{BWBID}%2F{EXPRESSION DATE}`.

The service is run as a single-dyno Heroku deployment with European locality. The Heroku platform was chosen because it is reliable, easy to deploy on and cheap (in this case even free). 

Future work
-----------
* Some documents contain 'empty' or 'error' fields to denote whether the XML content is empty or an error node. I would like to extends these fields to all documents.
* Not all documents validate to their DTD. I would like to add a field that says whether the file validates to its DTD.
* Provide a cleaned-up, MetaLex-compliant version of the XML.
* Track when a file disappears from BwbIdList, yet its latest expression does not specify a retraction date. I would like a 'disappearance_date' field for this.
* XML is provided as a field of the document, but it can also be provided as an attachment, which may make more sense.
* Encoding '/' to '%2F' is awkward, a colon (:) would be a better separator
>>>>>>> a51ed291185377e782b887de52f281fc392958bc
